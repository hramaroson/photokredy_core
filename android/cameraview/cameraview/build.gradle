apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// Required by bintray
version = '2.0.0-beta04'
group = 'com.otaliastudios'

//region android dependencies

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    // buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName project.version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/options'
        main.java.srcDirs += 'src/main/views'
        main.java.srcDirs += 'src/main/utils'
        main.java.srcDirs += 'src/main/gles'
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.0'

    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    api 'androidx.exifinterface:exifinterface:1.0.0'
    api 'androidx.lifecycle:lifecycle-common:2.1.0-alpha01'
    implementation 'androidx.annotation:annotation:1.0.1'
}

//endregion

//region bintray

install {
    repositories.mavenInstaller {
        pom.project {
            name 'CameraView'
            description 'A well documented, high-level Android interface that makes capturing pictures ' +
                    'and videos easy, addressing most of the common issues and needs.'
            url 'https://github.com/natario1/CameraView'

            packaging 'aar'
            groupId project.group
            artifactId 'cameraview'
            version project.version

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            scm {
                connection 'https://github.com/natario1/CameraView.git'
                developerConnection 'https://github.com/natario1/CameraView.git'
                url 'https://github.com/natario1/CameraView'

            }
            developers {
                developer {
                    id = 'natario'
                    name 'Natario'
                }
            }
        }
    }
}

def bintrayUser
def bintrayKey
def travis = System.getenv("TRAVIS")
if (travis) {
    bintrayUser = System.getenv("BINTRAY_USER")
    bintrayKey = System.getenv("BINTRAY_KEY")
} else {
    Properties props = new Properties()
    props.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = props.getProperty('bintray.user')
    bintrayKey = props.get('bintray.key')
}

bintray {
    // https://github.com/bintray/gradle-bintray-plugin
    user = bintrayUser
    key = bintrayKey
    configurations = ['archives']
    pkg {
        repo = 'android'
        name = 'CameraView'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/natario1/CameraView.git'
        publish = true
        override = true
        version {
            name = project.version
            desc = 'CameraView v. '+project.version
            released = new Date()
            vcsTag = 'v'+project.version
        }
    }
}

//endregion

//region javadoc and sources

// From official sample https://github.com/bintray/bintray-examples/blob/master/gradle-aar-example/build.gradle
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += project.files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    project.android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            classpath += files(variant.javaCompile.classpath)
        }
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

//endregion

//region code coverage

// 1. running androidTests with connectedCheck will generate an .ec file
// in build/outputs/code-coverage/connected, plus the XML result in
// in build/reports/coverage/debug/report.xml .

// 2. running unit tests with testDebugUnitTest will just generate the .exec file.
// The JacocoReport task from the jacoco plugin can create the XML report out of it.

// to have a unified report, we just pass both the .exec and the .ec file
// to the jacoco task, so we get a unified XML report with total coverage.
// Reference: https://medium.com/@rafael_toledo/setting-up-an-unified-coverage-report-in-android-with-jacoco-robolectric-and-espresso-ffe239aaf3fa

apply plugin: 'jacoco'

def reportsDirectory = "$buildDir/reports/"
jacoco {
    toolVersion = "0.8.1"
    reportsDir = file(reportsDirectory)
}

task mergedCoverageReport(type: JacocoReport) {
    dependsOn "testDebugUnitTest"
    dependsOn "connectedCheck"

    // Merge unit tests and android tests data
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", // Unit tests
            "outputs/code-coverage/connected/*coverage.ec" // Android tests
    ])

    // Sources
    sourceDirectories = files(android.sourceSets.main.java.sourceFiles)
    additionalSourceDirs = files([ // Add BuildConfig and R.
            "$buildDir/generated/source/buildConfig/debug",
            "$buildDir/generated/source/r/debug"
    ])

    // Classes (.class files)
    // Not everything in the filter relates to CameraView,
    // but let's keep a generic filter
    def classDir = "$buildDir/intermediates/javac/debug"
    def classFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            'android/**',
            'androidx/**',
            'com/google/**',
            '**/*$ViewInjector*.*',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/*Module_*Factory.class',
    ]
    classDirectories = fileTree(dir: classDir, excludes: classFilter);

    reports.html.enabled = true
    reports.xml.enabled = true
    reports.xml.destination file("$reportsDirectory/mergedCoverageReport/report.xml")
}

//endregion

// export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home
// To deploy ./gradlew bintrayUpload

